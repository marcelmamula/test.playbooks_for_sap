---

# This GitHub Action requires the repository to have GitHub Action 'Read and write permissions' under:
# Settings -> Action -> General -> Workflow permissions.
# Amend GitHub Action 'Artifact and log retention' to 60 days to avoid error
# 'You are running out of disk space. The runner will stop working when the machine runs out of disk space.'

name: Update SAP Software versions

on:
  # Runs at 05:00 on every day-of-week from Monday through Friday
  schedule:
    - cron: '0 5 * * 1-5'

  # Execute after sync from main is completed
  workflow_run:
    workflows: ["Sync Main to Main-Auto-Updated"]
    types: [completed]

  # Enable manual start button
  workflow_dispatch:

jobs:
  sap_software_availability:
    name: 'Update SAP Software versions'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo_playbooks

      - name: Python setup
        id: local_setup
        run: |
          python --version
          python -m pip install requests beautifulsoup4 lxml
          git clone https://github.com/sap-linuxlab/community.sap_launchpad.git
          ls -lha

      - name: Ansible Playbooks for SAP - check SAP software availability
        id: identify_software_list
        env:
          sap_user_id: ${{ secrets.SAP_USER_ID }}
          sap_user_id_password: ${{ secrets.SAP_USER_ID_PASSWORD }}
        run: |
          if ! which python > /dev/null; then echo 'Python binary not available' && exit 1 ; fi
          # Extract from softwarecenter_search_list_.* until first empty line, then remove yaml formatting and sort for unique
          # Each file on newline and strip whitespaces or tabs
          export software_list=$(cat ./repo_playbooks/**/**/ansible_extravars.yml \
            | awk '!NF{f=0} /^.*softwarecenter_search_list.*/{f=1} f{print}' | awk '!/.*softwarecenter_search_list.*/' \
            | awk '{sub(/#.*/,""); print}' | awk '{sub(/ .*- '\''/,""); print}' | sed '/^ *$/d' \
            | sed '/^---*$/d' | tr -d "'" | sort | uniq  | tr -d " \t")
          export errors_list=""
          echo "Software List:"
          echo "$software_list" # Quote command substitution to preserve newline

          cd $GITHUB_WORKSPACE/community.sap_launchpad/plugins
          cp $GITHUB_WORKSPACE/repo_playbooks/.github/workflows/scripts/python_module_search_script.py .

          # Pass multi-line string to Python
          # Runtime ~30 min to search for ~350 files
          # If error returned instead of download link, the file is missing
          # Quote command substitution to preserve newline
          errors_list="$(python ./python_module_search_script.py "$software_list" "$sap_user_id" "$sap_user_id_password")"
          if [ -z "$errors_list" ]
          then
            exit 0
          else
            echo ""
            echo "### ERRORS identified ####"
            echo "Ansible Playbooks for SAP require updating,"
            echo "as the following SAP Software are no longer available:"
            echo "$errors_list" # Quote command substitution to preserve newline
            echo ""
            # Ensure stdout accuracy by pause script
            sleep 10
            cd $GITHUB_WORKSPACE/community.sap_launchpad/plugins
            sed -i "s|python3|python|g" ./modules/software_center_download.py
            cp $GITHUB_WORKSPACE/repo_playbooks/.github/workflows/scripts/python_module_fuzzy_call_script.py .
            export exit1_check=0

            # Pass list to for loop, not multi-line string. Do not use quote command substitution
            for filename in $errors_list
            do
              filename_noext="${filename%.*}"
              filename_id_only="${filename_noext##*-}"
              filename_name_and_version_only="${filename_noext%_*}"
              #echo "DEBUG - Filename"
              #echo $filename
              #echo "DEBUG - Filename NO EXT"
              #echo $filename_noext
              #echo "DEBUG - Filename ID ONLY"
              #echo $filename_id_only
              #echo "DEBUG - Filename NAME AND VERSION ONLY"
              #echo $filename_name_and_version_only
              cd $GITHUB_WORKSPACE/community.sap_launchpad/plugins

              # Quote command substitution to preserve newline
              search_file="$(python ./python_module_fuzzy_call_script.py \
                $filename_id_only $filename_name_and_version_only "$sap_user_id" "$sap_user_id_password")"

              if [[ "$search_file" == *"ERROR"* ]]; then
                echo -e "$search_file" # Quote variable to preserve newline
                exit1_check=1
              elif [[ "$search_file" == "" ]]; then
                echo "Skipped file $filename"
              elif [[ "$search_file" == *"IMDB_SERVER"* ]]; then
                echo "Perform recursive sed for SAP HANA and SAP HANA Components"
                cd $GITHUB_WORKSPACE/repo_playbooks
                echo "$search_file" | while IFS= read -r line ; do
                  stripped_search_file=$(echo $line | tr -d '\n')
                  if [[ "$stripped_search_file" == *.* ]]; then
                    echo "-> Perform recursive sed for $filename change to $search_file"
                    find . -type f -not -path '*/\.*' -exec sed -i "s/$filename/$stripped_search_file/g" {} \;
                  elif [[ "$stripped_search_file" == *\;* ]]; then
                    origin_prefix="${stripped_search_file%;*}"
                    replace_prefix="${stripped_search_file##*;}"
                    echo "-> Perform recursive sed for $origin_prefix change to $replace_prefix"
                    find . -type f -not -path '*/\.*' -exec sed -i "s/$origin_prefix.[0-9]\{1,\}/$replace_prefix/g" {} \;
                  fi
                done

              else
                echo "Perform recursive sed for $filename change to $search_file"
                stripped_search_file=$(echo $search_file | tr -d '\n')
                cd $GITHUB_WORKSPACE/repo_playbooks
                find . -type f -not -path '*/\.*' -exec sed -i "s/$filename/$stripped_search_file/g" {} \;

              fi
            done
            if [[ "$exit1_check" -eq 1 ]]; then
              exit 1
            fi
          fi

      - name: Commit to main-auto-updated branch
        if: always() # Ensure even if errors on previous step, that any replaced filenames are committed
        id: git_commit_auto
        run: |
          cd $GITHUB_WORKSPACE/repo_playbooks
          if [[ $(git status --porcelain) ]]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git stash
            git pull
            git stash pop
            git add .
            git status
            git commit -m "software-update: replace with new filenames $(date +%F_%H-%M)"
            git push
          else
            exit 0
          fi
